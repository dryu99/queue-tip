{"version":3,"sources":["types.js","utils/logger.js","socket.js","components/Home.js","components/SignIn.js","components/User.js","components/Queue.js","components/AdminPopover.js","components/PopoverWrapper.js","components/Users.js","components/Room.js","components/Error.js","App.js","index.js"],"names":["UserTypes","Object","freeze","ADMIN","BASIC","info","console","error","socket","io","emitDequeue","data","callback","emit","SocketEvents","DEQUEUE","JOIN","CREATE_ROOM","DISCONNECT","LEAVE","NEW_USER_JOIN","ROOM_CHECK","ENQUEUE","UPDATE_USER","Home","setCurrentUserType","setRoom","setRoomError","useState","newRoomName","setNewRoomName","history","useHistory","Container","className","Form","Row","Col","xs","Label","Control","value","onChange","e","target","placeholder","Button","onClick","newRoom","preventDefault","trim","logger","name","resData","room","push","id","variant","type","placeHolderNames","SignIn","user","setUser","addNewUser","addNewQueueUser","newName","setNewName","alertText","setAlertText","nameInputRef","React","createRef","useEffect","ReactDOM","findDOMNode","current","focus","randomIndex","Math","floor","length","random","placeHolderName","ref","Text","roomId","usersInRoom","usersInQueue","User","isCurrentUser","isAdmin","colourClass","Queue","queueUsers","removeQueueUser","setInQueue","ListGroup","map","qu","i","listItemProps","action","userId","dequeuedUser","key","Item","AdminPopover","props","makeAdmin","Popover","Content","log","AdminPopoverWrapper","children","OverlayTrigger","rootClose","trigger","placement","overlay","Users","users","u","listItem","PopoverWrapper","Room","setUsers","setQueueUsers","inQueue","on","newUser","leftUser","removeUser","enqueuedUser","updatedUser","replaceUser","off","concat","filter","newQueueUser","index","findIndex","usersCopy","splice","isUserSignedIn","Fragment","dummy","document","createElement","body","appendChild","window","location","href","select","execCommand","removeChild","size","block","userToUpdate","reqData","Error","text","App","currentUser","setCurrentUser","roomError","match","useRouteMatch","params","path","exact","render","getElementById"],"mappings":"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","file":"static/js/main.1335e009.chunk.js","sourcesContent":["export const UserTypes = Object.freeze({\n  ADMIN: 'admin',\n  BASIC: 'basic'\n});\n","const info = (...params) => {\n  // eslint-disable-next-line no-undef\n  if (process.env.NODE_ENV === 'development') {\n    console.log(...params);\n  }\n};\n\nconst event = (...params) => {\n  info('<EV> ', params);\n};\n\nconst error = (...params) => {\n  console.error(...params);\n};\n\nexport default { info, event, error };","import io from 'socket.io-client';\n\nconst socket = io();\n\nexport const emitCreateRoom = (newRoom, callback) => {\n  socket.emit(SocketEvents.CREATE_ROOM, newRoom, callback);\n};\n\nexport const emitCheckRoom = (roomId, callback) => {\n  socket.emit(SocketEvents.ROOM_CHECK, { roomId }, callback);\n};\n\nexport const emitEnqueue = (data, callback) => {\n  socket.emit(SocketEvents.ENQUEUE, data, callback);\n};\n\nexport const emitDequeue = (data, callback) => {\n  socket.emit(SocketEvents.DEQUEUE, data, callback);\n};\n\nexport const emitJoin = (data, callback) => {\n  socket.emit(SocketEvents.JOIN, data, callback);\n};\n\nexport const SocketEvents = Object.freeze({\n  JOIN: 'join',\n  CREATE_ROOM: 'create_room',\n  DISCONNECT: 'disconnect',\n  LEAVE: 'leave',\n  NEW_USER_JOIN: 'new_user_join',\n  ROOM_CHECK: 'room_check',\n  ENQUEUE: 'enqueue',\n  DEQUEUE: 'dequeue',\n  UPDATE_USER: 'update_user'\n});\n\nexport default socket;","import React, { useState } from 'react';\nimport { Button, Container, Form, Col } from 'react-bootstrap';\nimport { useHistory } from 'react-router-dom';\nimport { UserTypes } from '../types';\nimport logger from '../utils/logger';\n\nimport { emitCreateRoom } from '../socket';\n\nconst Home = ({ setCurrentUserType, setRoom, setRoomError }) => {\n  const [newRoomName, setNewRoomName] = useState('');\n\n  const history = useHistory();\n\n  const handleCreateRoomClick = (e) => {\n    e.preventDefault();\n\n    if (newRoomName && newRoomName.trim() !== '') {\n      // users who create rooms are admins\n      setCurrentUserType(UserTypes.ADMIN);\n\n      // create room on server, set room on client and enter room if it does\n      logger.info('emitting room creation event');\n      emitCreateRoom({ name: newRoomName }, (resData) => {\n        const { room, error } = resData;\n\n        if (room && !error) {\n          setRoom(room);\n\n          // go to room url\n          history.push(`/room/${resData.room.id}`);\n        } else {\n          logger.error(error);\n          setRoomError('sorry room doesn\\'t exist...');\n        }\n      });\n    } else {\n      logger.error('can\"t submit room with empty name!');\n    }\n  };\n\n  return (\n    <Container className=\"mt-4\">\n      <h1 className=\"text-center mb-5\">queue-tip</h1>\n      <Form>\n        <Form.Row className=\"justify-content-center mb-3\">\n          <Col xs=\"auto\">\n            <Form.Label>Room Name</Form.Label>\n            <Form.Control\n              value={newRoomName}\n              onChange={(e) => setNewRoomName(e.target.value)}\n              placeholder=\"CPSC 110 Office Hours\"\n            />\n          </Col>\n        </Form.Row>\n        <Form.Row className=\"justify-content-center\">\n          <Col xs=\"auto\">\n            <Button onClick={handleCreateRoomClick} variant=\"primary\" type=\"submit\">Create Room</Button>\n          </Col>\n        </Form.Row>\n      </Form>\n    </Container>\n  );\n};\n\nexport default Home;","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Button, Container, Form, Col } from 'react-bootstrap';\nimport { emitJoin } from '../socket';\nimport logger from '../utils/logger';\n\nconst placeHolderNames = ['Mr. Recursion', 'Prof. G', 'Gregor Kiczales'];\n\nconst SignIn = ({ user, room, setUser, addNewUser, addNewQueueUser }) => {\n  const [newName, setNewName] = useState('');\n  const [alertText, setAlertText] = useState('');\n\n  // keep track of input component so we can focus on it\n  const nameInputRef = React.createRef();\n\n  // if popup is visible, focus on name input component\n  useEffect(() => {\n    // eslint-disable-next-line react/no-find-dom-node\n    ReactDOM.findDOMNode(nameInputRef.current).focus();\n\n  }, [nameInputRef]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (newName.trim() !== '') {\n      emitJoin({ name: newName, type: user.type, roomId: room.id }, (resData) => {\n        const { user, usersInRoom, usersInQueue, error } = resData;\n        logger.info('acknowledged from JOIN event', user);\n\n        if (!error) {\n          setUser(user);\n          addNewUser([...usersInRoom, user]);\n          addNewQueueUser(usersInQueue);\n        } else {\n          logger.error(error);\n          setAlertText('Name is already taken, please try something else.');\n        }\n      });\n    } else {\n      setAlertText('Your name can\\'t be empty!');\n    }\n  };\n\n  // randomly select a placeholder name\n  const randomIndex = Math.floor(placeHolderNames.length * Math.random());\n  const placeHolderName = placeHolderNames[randomIndex];\n\n  return (\n    <Container className=\"mt-4\">\n      <h1 className=\"text-center mb-5\">Sign In</h1>\n      <Form>\n        <Form.Row className=\"justify-content-center mb-3\">\n          <Col xs=\"auto\">\n            <Form.Label>Your Name</Form.Label>\n            <Form.Control\n              ref={nameInputRef}\n              value={newName}\n              onChange={(e) => setNewName(e.target.value)}\n              placeholder={placeHolderName}\n            />\n          </Col>\n        </Form.Row>\n        <Form.Row className=\"justify-content-center mb-3\">\n          <Col xs=\"auto\">\n            <Form.Text className=\"text-muted\">\n              {alertText}\n            </Form.Text>\n          </Col>\n        </Form.Row>\n        <Form.Row className=\"justify-content-center\">\n          <Col xs=\"auto\">\n            <Button\n              onClick={handleSubmit}\n              variant=\"primary\"\n              type=\"submit\"\n            >\n              Enter Room\n            </Button>\n          </Col>\n        </Form.Row>\n      </Form>\n    </Container>\n  );\n};\n\nexport default SignIn;","import React from 'react';\nimport { UserTypes } from '../types';\n\nconst User = ({ user, isCurrentUser }) => {\n  const isAdmin = user.type === UserTypes.ADMIN;\n  const colourClass = isAdmin\n    ? 'text-danger'\n    : isCurrentUser\n      ? 'text-primary'\n      : '';\n\n  return (\n    <span className={colourClass}>\n      {user.name} {isAdmin ? '(admin)' : ''}\n    </span>\n  );\n};\n\nexport default User;","import React from 'react';\nimport { Row, Col, Container, ListGroup } from 'react-bootstrap';\nimport { UserTypes } from '../types';\nimport User from './User';\nimport { emitDequeue } from '../socket';\nimport logger from '../utils/logger';\n\nconst Queue = ({ room, user, queueUsers, removeQueueUser, setInQueue }) => {\n\n  const removeUserFromQueue = (e, userId) => {\n    emitDequeue({ userId, roomId: room.id }, (data) => {\n      logger.info('acknowledged from DEQUEUE event', data.dequeuedUser);\n      removeQueueUser(data.dequeuedUser.id);\n\n      if (data.dequeuedUser.id === user.id) {\n        setInQueue(false);\n      }\n    });\n  };\n\n  return (\n    <div >\n      <h4>Queue</h4>\n      <ListGroup>\n        {queueUsers.map((qu, i) => {\n          const isCurrentUser = user.name === qu.name;\n          const isAdmin = user.type === UserTypes.ADMIN;\n\n          const listItemProps = {\n            // variant: isCurrentUser ? 'secondary' : null,\n            action: isAdmin ? true : false,\n            onClick: isAdmin ? (e) => removeUserFromQueue(e, qu.id) : null\n          };\n\n          return (\n            <Container key={qu.id}>\n              <Row className=\"align-items-center\">\n                <Col xs=\"auto\">\n                  <b>{i + 1}</b>\n                </Col>\n                <Col>\n                  <ListGroup.Item {...listItemProps}>\n                    <User user={qu} isCurrentUser={isCurrentUser}/>\n                  </ListGroup.Item>\n                </Col>\n              </Row>\n            </Container>\n          );\n        })}\n      </ListGroup>\n    </div>\n  );\n};\n\nexport default Queue;\n\n","import React from 'react';\nimport { ListGroup, Popover } from 'react-bootstrap';\n\nconst AdminPopover = (props) => {\n  const { makeAdmin, user } = props;\n\n  // these props shouldn't be passed to Popover\n  delete props.makeAdmin;\n  delete props.user;\n\n  const handleMakeAdminClick = () => {\n    console.log('only here');\n    makeAdmin(user);\n  };\n\n  return (\n    <Popover {...props}>\n      <Popover.Content>\n        <ListGroup variant=\"flush\">\n          <ListGroup.Item action onClick={handleMakeAdminClick}>Make Admin</ListGroup.Item>\n        </ListGroup>\n      </Popover.Content>\n    </Popover>\n  );\n};\n\nexport default AdminPopover;","import React from 'react';\nimport { OverlayTrigger } from 'react-bootstrap';\nimport AdminPopover from './AdminPopover';\n\nconst AdminPopoverWrapper = ({ children, ...props }) => {\n  return (\n    <OverlayTrigger rootClose trigger=\"click\" placement=\"left\" overlay={AdminPopover(props)}>\n      {children}\n    </OverlayTrigger>\n  );\n};\n\nexport default AdminPopoverWrapper;","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport User from './User';\nimport PopoverWrapper from './PopoverWrapper';\nimport { UserTypes } from '../types';\n\nconst Users = ({ user, users, makeAdmin }) => {\n  return (\n    <div>\n      <h4>Users: {users.length}</h4>\n      <ListGroup>\n        {users.map(u => {\n          const isCurrentUser = user.name === u.name;\n          const isAdmin = user.type === UserTypes.ADMIN;\n\n          const listItemProps = {\n            action: isAdmin ? true : false,\n          };\n\n          const listItem = (\n            <ListGroup.Item key={u.id} {...listItemProps}>\n              <User user={u} isCurrentUser={isCurrentUser}/>\n            </ListGroup.Item>\n          );\n\n          return (\n            isAdmin ?\n              <PopoverWrapper key={u.id} makeAdmin={makeAdmin} user={u}>\n                {listItem}\n              </PopoverWrapper>\n              :\n              listItem\n          );\n        })}\n      </ListGroup>\n    </div>\n  );\n};\n\nexport default Users;","import React, { useState, useEffect } from 'react';\nimport { Col, Container, Row, Button } from 'react-bootstrap';\nimport socket, { SocketEvents, emitEnqueue, emitDequeue } from '../socket';\nimport logger from '../utils/logger';\n\nimport SignIn from './SignIn';\nimport Queue from './Queue';\nimport Users from './Users';\nimport { UserTypes } from '../types';\n\nconst Room = ({ room, user, setUser }) => {\n  const [users, setUsers] = useState([]);\n  const [queueUsers, setQueueUsers] = useState([]);\n  const [inQueue, setInQueue] = useState(false);\n\n  // subscribe to relevant socket events\n  useEffect(() => {\n    // when another user joins, add them to user list\n    socket.on(SocketEvents.NEW_USER_JOIN, ({ newUser }) => {\n      logger.info('received JOIN event', newUser);\n      addNewUser(newUser);\n    });\n\n    // when another user leaves, remove them from user list\n    socket.on(SocketEvents.LEAVE, ({ leftUser }) => {\n      logger.info('received LEAVE event', leftUser);\n      removeUser(leftUser.id);\n      removeQueueUser(leftUser.id);\n    });\n\n    // when another user joins queue, add them to queue list\n    socket.on(SocketEvents.ENQUEUE, ({ enqueuedUser }) => {\n      logger.info('received ENQUEUE event', enqueuedUser);\n      addNewQueueUser(enqueuedUser);\n    });\n\n    // when another user joins queue, add them to queue list\n    socket.on(SocketEvents.DEQUEUE, ({ dequeuedUser }) => {\n      logger.info('received DEQUEUE event', dequeuedUser);\n      removeQueueUser(dequeuedUser.id);\n\n      if (dequeuedUser.id === user.id) {\n        setInQueue(false);\n      }\n    });\n\n    // when another user gets updated, replace their status in your list.\n    socket.on(SocketEvents.UPDATE_USER, ({ updatedUser }) => {\n      logger.info('received UPDATE_USER event', updatedUser);\n      replaceUser(updatedUser);\n\n      // If current user is the one who got updated, update that state too.\n      if (updatedUser.id === user.id) {\n        setUser(updatedUser);\n      }\n    });\n\n    // on component unmount, disconnect and turn off socket\n    return () => {\n      socket.emit(SocketEvents.DISCONNECT);\n      socket.off();\n    };\n  }, [users, queueUsers]);\n\n  const addNewUser = (newUser) => {\n    setUsers(users.concat(newUser));\n  };\n\n  const removeUser = (id) => {\n    setUsers(users.filter(u => u.id !== id));\n  };\n\n  const addNewQueueUser = (newQueueUser) => {\n    setQueueUsers(queueUsers.concat(newQueueUser));\n  };\n\n  const removeQueueUser = (id) => {\n    setQueueUsers(queueUsers.filter(u => u.id !== id));\n  };\n\n  const replaceUser = (updatedUser) => {\n    const index = users.findIndex(u => u.id === updatedUser.id);\n    if (index !== -1) {\n      const usersCopy = [...users];\n\n      // replace updated user at specified index\n      usersCopy.splice(index, 1, updatedUser);\n\n      setUsers(usersCopy);\n    } else {\n      logger.error(`couldn't find user ${updatedUser.name} so couldn't update them`);\n    }\n  };\n\n  const makeAdmin = (userToUpdate) => {\n    const reqData = {\n      ...userToUpdate,\n      type: UserTypes.ADMIN\n    };\n\n    socket.emit(SocketEvents.UPDATE_USER, reqData, (resData) => {\n      logger.info('acknowledged from UPDATE_USER event', resData);\n      const { updatedUser, error } = resData;\n\n      if (!error) {\n        replaceUser(updatedUser);\n      }\n    });\n  };\n\n\n  const copyLinkToClipboard = () => {\n    // TODO manipulating DOM here directly feels sketchy, doing it the react way doesn't work see comments below\n    var dummy = document.createElement('textarea');\n    document.body.appendChild(dummy);\n    dummy.value = window.location.href;\n    dummy.select();\n    document.execCommand('copy');\n    document.body.removeChild(dummy);\n  };\n\n  const handleQueueToggle = () => {\n    if (inQueue) {\n      emitDequeue({ userId: user.id, roomId: room.id }, (resData) => {\n        logger.info('acknowledged from DEQUEUE event', resData);\n        const { dequeuedUser, error } = resData;\n\n        if (!error) {\n          removeQueueUser(dequeuedUser.id);\n          setInQueue(false);\n        } else {\n          logger.error(error);\n        }\n      });\n    } else {\n      emitEnqueue({ userId: user.id, roomId: room.id }, (resData) => {\n        logger.info('acknowledged from ENQUEUE event', resData);\n        const { enqueuedUser, error } = resData;\n\n        if (!error) {\n          addNewQueueUser(enqueuedUser);\n          setInQueue(true);\n        } else {\n          logger.error(error);\n        }\n      });\n    }\n  };\n\n  // user is considered signed in when name and id exist\n  const isUserSignedIn = user && user.name && user.id;\n\n  return (\n    <Container className=\"mt-4\">\n      {room && isUserSignedIn ?\n        <React.Fragment>\n          <Row>\n            <Col>\n              <h1>{room.name}</h1>\n            </Col>\n            <Col xs=\"auto\">\n              <Button onClick={copyLinkToClipboard} size=\"lg\" variant=\"secondary\">\n                Copy Link\n              </Button>\n            </Col>\n            <Col xs=\"3\">\n              <Button onClick={handleQueueToggle} size=\"lg\" block>\n                {inQueue ? 'Leave Queue' : 'Join Queue'}\n              </Button>\n            </Col>\n          </Row>\n          <hr/>\n          <Row>\n            <Col>\n              <Queue\n                room={room}\n                user={user}\n                queueUsers={queueUsers}\n                removeQueueUser={removeQueueUser}\n                setInQueue={setInQueue}\n              />\n            </Col>\n            <Col xs=\"3\">\n              <Users\n                user={user}\n                users={users}\n                makeAdmin={makeAdmin}\n              />\n            </Col>\n          </Row>\n        </React.Fragment>\n        :\n        <SignIn\n          room={room}\n          user={user}\n          setUser={setUser}\n          addNewUser={addNewUser}\n          addNewQueueUser={addNewQueueUser}\n        />\n      }\n      {/* strangely enough, doing this doesn't work for copying to clipboard - setting display to none causes the copied value to be \"window.location.href\" */}\n      {/* <textarea ref={linkRef} style={{ display: 'none' }} value={window.location.href}/> */}\n    </Container>\n  );\n};\n\nexport default Room;","import React from 'react';\n\nconst Error = ({ text }) => {\n  return (\n    <div>\n      {text}\n    </div>\n  );\n};\n\nexport default Error;","import React, { useEffect, useState } from 'react';\nimport Home from './components/Home';\nimport Room from './components/Room';\nimport Error from './components/Error';\nimport logger from './utils/logger';\n\nimport {\n  Switch,\n  Route,\n  useRouteMatch\n} from 'react-router-dom';\n\nimport { emitCheckRoom } from './socket';\nimport { UserTypes } from './types';\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState({ type: UserTypes.BASIC });\n  const [room, setRoom] = useState(null);\n  const [roomError, setRoomError] = useState(null);\n\n  const match = useRouteMatch('/room/:id');\n\n  // if user entered via link, check to see if specified room id exists and init room\n  useEffect(() => {\n    if (match && !room) {\n      logger.info('emitting room check event');\n\n      // check to see if room exists on server, set room on client if it does\n      emitCheckRoom(match.params.id, (resData) => {\n        const { room, error } = resData;\n\n        logger.info('room event acknowledged', room);\n        if (room && !error) {\n          setRoom(room);\n        } else {\n          logger.error(error);\n          setRoomError('sorry room doesn\\'t exist...');\n        }\n      });\n    }\n  }, [match, room]);\n\n  const setCurrentUserType = (type) => {\n    setCurrentUser({ ...currentUser, type });\n  };\n\n  return (\n    <React.Fragment>\n      <Switch className=\"mt-4\">\n        <Route path=\"/room/:id\">\n          {!roomError ?\n            <Room room={room} user={currentUser} setUser={setCurrentUser}/>\n            :\n          // would be nice to put a spinner or sth here\n            <Error text={roomError}/>\n          }\n        </Route>\n        <Route exact path=\"/\">\n          <Home\n            setCurrentUserType={setCurrentUserType}\n            setRoom={setRoom}\n            setRoomError={setRoomError}\n          />\n        </Route>\n        <Route>\n          <Error text=\"404 resource not found\"/>\n        </Route>\n      </Switch>\n      {/* <Notification /> */}\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport {\n  BrowserRouter as Router\n} from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}